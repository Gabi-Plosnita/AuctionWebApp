@page "/"
@using AuctionWebApp.Models
@using AuctionWebApp.HttpClients
@inject IAuthHttpClient AuthClient

<h2>Admin Login</h2>
<div>
    <label>Email:</label><br />
    <input @bind="adminEmail" placeholder="admin@example.com" />
</div>
<div>
    <label>Password:</label><br />
    <input type="password" @bind="adminPassword" placeholder="••••••••" />
</div>
<button @onclick="LoginAdmin">Login as Admin</button>
<button @onclick="Logout">Logout</button>

@if (!string.IsNullOrEmpty(adminError))
{
    <p class="text-danger">@adminError</p>
}
else if (!string.IsNullOrEmpty(adminSuccess))
{
    <p class="text-success">@adminSuccess</p>
}

<hr />

<h2>Register Driver</h2>
<div>
    <label>Email:</label><br />
    <input @bind="driverEmail" placeholder="driver@example.com" />
</div>
<div>
    <label>Password:</label><br />
    <input type="password" @bind="driverPassword" placeholder="••••••••" />
</div>
<button @onclick="RegisterDriver">Register Driver</button>

@if (!string.IsNullOrEmpty(driverError))
{
    <p class="text-danger">@driverError</p>
}
else if (!string.IsNullOrEmpty(driverSuccess))
{
    <p class="text-success">@driverSuccess</p>
    <p>@driverResponse.Id</p>
    <p>@driverResponse.Email</p>
    <p>@driverResponse.Role</p>
}

@code {
    private string adminEmail = "";
    private string adminPassword = "";
    private string? adminError;
    private string? adminSuccess;

    private string driverEmail = "";
    private string driverPassword = "";
    private string? driverError;
    private string? driverSuccess;

	private DriverResponse? driverResponse;

    private async Task LoginAdmin()
    {
        adminError = adminSuccess = null;

        var result = await AuthClient.LoginAdminAsync(new LoginRequest
            {
                Email = adminEmail,
                Password = adminPassword
            });

        if (result.HasErrors)
            adminError = string.Join("; ", result.Errors);
        else
            adminSuccess = "✅ Admin logged in successfully";
    }

    private async Task RegisterDriver()
    {
        driverError = driverSuccess = null;

        var result = await AuthClient.RegisterDriverAsync(new RegisterDriverRequest
            {
                Email = driverEmail,
                Password = driverPassword
            });

        if (result.HasErrors)
            driverError = string.Join("; ", result.Errors);
        else
        {
            driverSuccess = "✅ Driver registered successfully";
			driverResponse = result.Data;
        }
    }

	private async Task Logout()
	{
		adminError = adminSuccess = null;
		var result = await AuthClient.LogoutAsync();
		if (result.HasErrors)
			adminError = string.Join("; ", result.Errors);
		else
			adminSuccess = "✅ Admin logged out successfully";
	}
}
