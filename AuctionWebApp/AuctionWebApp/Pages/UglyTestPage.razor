@* @using AuctionWebApp.Enums
@using AuctionWebApp.Models
@using AuctionWebApp.HttpClients
@using AuctionWebApp.Services
@using Microsoft.AspNetCore.Authorization

@page "/"

@inject IAuthHttpClient AuthClient
@inject ICategoryHttpClient CategoriesClient
@inject IAuctionHttpClient AuctionsHttpClient

<a href="/admin-login">Admin Login Page</a>
<br />
<a href="/admin-dashboard">Admin Dashboard Page</a>


<h2>Admin Login</h2>
<div>
    <label>Email:</label><br />
    <input @bind="adminEmail" placeholder="admin@example.com" />
</div>
<div>
    <label>Password:</label><br />
    <input type="password" @bind="adminPassword" placeholder="••••••••" />
</div>
<button @onclick="LoginAdmin">Login as Admin</button>
<button @onclick="Logout">Logout</button>

@if (!string.IsNullOrEmpty(adminError))
{
    <p class="text-danger">@adminError</p>
}
else if (!string.IsNullOrEmpty(adminSuccess))
{
    <p class="text-success">@adminSuccess</p>
}

<hr />

<h2>Register Driver</h2>
<div>
    <label>Email:</label><br />
    <input @bind="driverEmail" placeholder="driver@example.com" />
</div>
<div>
    <label>Password:</label><br />
    <input type="password" @bind="driverPassword" placeholder="••••••••" />
</div>
<button @onclick="RegisterDriver">Register Driver</button>

@if (!string.IsNullOrEmpty(driverError))
{
    <p class="text-danger">@driverError</p>
}
else if (!string.IsNullOrEmpty(driverSuccess))
{
    <p class="text-success">@driverSuccess</p>
    <p>@driverResponse.Id</p>
    <p>@driverResponse.Email</p>
    <p>@driverResponse.Role</p>
}

@foreach (var category in categories)
{
    <div>
        <h3>@category.Name</h3>
        <p>Id: @category.Id</p>
        <img src="https://localhost:7149@(@category.ImageUrl)"
             style="max-width:300px; display:block; margin:1rem 0;" />
    </div>
})

<EditForm Model="filter" OnValidSubmit="HandleFilter">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Category ID</label><br />
        <InputNumber @bind-Value="filter.CategoryId" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Seller ID</label><br />
        <InputNumber @bind-Value="filter.SellerId" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Bidder ID</label><br />
        <InputNumber @bind-Value="filter.BidderId" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Text Search</label><br />
        <InputText @bind-Value="filter.TextSearch" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Status</label><br />
        <InputSelect @bind-Value="filter.Status" class="form-control">
            @foreach (var s in Enum.GetValues<AuctionStatus>())
            {
                <option value="@s">@s</option>
            }
        </InputSelect>
    </div>

    <div class="mb-2">
        <label>Page</label><br />
        <InputNumber @bind-Value="filter.Page" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Page Size</label><br />
        <InputNumber @bind-Value="filter.PageSize" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h3>Auction Image Test</h3>

<img src="https://localhost:7149/uploads/auctions/1/861fe6da-d084-485d-87a5-2bf815955b1f.jpg"
     alt="Test Auction Image"
     style="max-width:300px; display:block; margin:1rem 0;" />

<p>When you hit this page, the above image should render from your uploads folder.</p>

@code {
    private string adminEmail = "";
    private string adminPassword = "";
    private string? adminError;
    private string? adminSuccess;

    private string driverEmail = "";
    private string driverPassword = "";
    private string? driverError;
    private string? driverSuccess;

    private DriverResponse? driverResponse;
    private AuctionFilterRequest filter = new();

    private List<CategoryResponse> categories = new List<CategoryResponse>();

    protected override async Task OnInitializedAsync()
    {
        var result = await CategoriesClient.GetAllAsync();
        if (result.HasErrors)
        {
            Console.WriteLine("Error fetching categories: " + string.Join(", ", result.Errors));
        }
        else
        {
            categories = result.Data;
        }

    }

    private async Task LoginAdmin()
    {
        adminError = adminSuccess = null;

        var result = await AuthClient.LoginAdminAsync(new LoginRequest
            {
                Email = adminEmail,
                Password = adminPassword
            });

        if (result.HasErrors)
            adminError = string.Join("; ", result.Errors);
        else
            adminSuccess = "✅ Admin logged in successfully";
    }

    private async Task RegisterDriver()
    {
        driverError = driverSuccess = null;

        var result = await AuthClient.RegisterDriverAsync(new RegisterDriverRequest
            {
                Email = driverEmail,
                Password = driverPassword
            });

        if (result.HasErrors)
            driverError = string.Join("; ", result.Errors);
        else
        {
            driverSuccess = "✅ Driver registered successfully";
            driverResponse = result.Data;
        }
    }

    private async Task Logout()
    {
        adminError = adminSuccess = null;
        var result = await AuthClient.LogoutAsync();
        if (result.HasErrors)
            adminError = string.Join("; ", result.Errors);
        else
            adminSuccess = "✅ Admin logged out successfully";
    }

    private async Task HandleFilter()
    {
        var result = await AuctionsHttpClient.GetByFilterAsync(filter);
    }
}
 *@