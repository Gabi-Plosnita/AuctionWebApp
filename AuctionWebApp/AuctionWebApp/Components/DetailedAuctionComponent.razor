@using AuctionWebApp.Helpers
<div class="auction-details card shadow p-4 mb-5 bg-white rounded">
	<h1 class="mt-10 mb-10 text-center">@Auction.Title</h1>

	<div class="d-flex flex-column flex-md-row justify-content-between mb-4 image-description-container">
		<div class="w-100 w-md-50 d-flex flex-wrap justify-content-center align-items-center">
			@if (imageUrls is null || !imageUrls.Any())
			{
				<p class="text-muted">No images available for this auction.</p>
			}
			else
			{
				<MudCarousel T="string"
							 Class="mud-width-full"
							 ItemsSource="@imageUrls"
							 ShowArrows="true"
							 ShowBullets="true"
							 AutoCycle="true"
							 Style="height:300px;">
					<ItemTemplate>
						<div class="d-flex justify-center align-center" style="height:100%">
							<img src="@($"{AppSettings.ApiUrl}{context}")" alt="Auction Image" class="carousel-image" />
						</div>
					</ItemTemplate>
				</MudCarousel>
			}
		</div>

		<div class="w-100 w-md-50 d-flex justify-content-center align-items-center px-4 text-center description-box">
			<p class="text-muted m-0">@Auction.Description</p>
		</div>
	</div>

	<div class="custom-separator"></div>

	<div class="col-md-4 mb-4 info-section text-center mx-auto">
		<h5 class="mb-10">Seller Information</h5>
		<p><strong>Email:</strong> @Auction.Seller.Email</p>
		<p><strong>Name:</strong> @Auction.Seller.FirstName @Auction.Seller.LastName</p>
		<p><strong>Address:</strong> @Auction.Seller.Address</p>
	</div>

	<div class="custom-separator"></div>

    <div class="bid-history-container mx-auto">
        <h5 class="mb-3 text-center">Bidding History</h5>
        @if (Auction.Bids.Any())
        {
            <div class="bid-list">
                @foreach (var bid in Auction.Bids.OrderByDescending(b => b.Date))
                {
                    <div class="bid-entry d-flex justify-content-between align-items-center">
                        <span class="bidder-name @(bid == Auction.Bids.OrderByDescending(b => b.Date).First() ? "fw-bold" : "")">
                            @("Bidder " + bid.Bidder.Id)
                        </span>
                        <span class="bid-date text-muted">
                            @DateHelper.GetRelativeTime(bid.Date)
                        </span>
                        <span class="bid-amount @(bid == Auction.Bids.OrderByDescending(b => b.Amount).First() ? "fw-bold" : "")">
                            @bid.Amount.ToString("C")
                        </span>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted text-center">No bids yet.</p>
        }
    </div>

	<div class="custom-separator"></div>

	@* <div class="mt-4">
                <h5>Time Remaining</h5>
                <p class="countdown" id="countdown"></p>
            </div> *@
</div>

@* @section Scripts {
<script>
    const endTime = new Date("@Auction.EndTime.ToUniversalTime().ToString("o")");
    const countdownEl = document.getElementById("countdown");

    function updateCountdown() {
        const now = new Date();
        const diff = endTime - now;

        if (diff <= 0) {
            countdownEl.textContent = "Auction ended";
            clearInterval(timer);
            return;
        }

        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
        const minutes = Math.floor((diff / 1000 / 60) % 60);
        const seconds = Math.floor((diff / 1000) % 60);

        countdownEl.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
    }

    updateCountdown();
    const timer = setInterval(updateCountdown, 1000);
</script>
} *@
